#include <FlexCAN_T4.h>
#include <TeensyCAN.h>

FlexCAN_T4FD<CAN3, RX_SIZE_256, TX_SIZE_256> FD;

TeensyCAN node100 = TeensyCAN(100);

struct pack{}; //基底クラス
struct MasterToTail: public pack{
    float updateTime;
    float drCommand;
    float deCommand;
    float err_state[15];
    float gravity[3];
    float mode;
};

// MasterToIF mip;
// IFToMaster imp;
MasterToTail mtp;

// TailToMaster tmp;
// TailToIF tip;

int loopCount = 0;

void canSniff(const CANFD_message_t &msg) {
  Serial.print("ISR - MB "); Serial.print(msg.mb);
  Serial.print("  OVERRUN: "); Serial.print(msg.flags.overrun);
  Serial.print("  LEN: "); Serial.print(msg.len);
  Serial.print(" EXT: "); Serial.print(msg.flags.extended);
  Serial.print("  EDL: "); Serial.print(msg.edl );
  Serial.print(" TS: "); Serial.print(msg.timestamp);
  Serial.print(" ID: "); Serial.print(msg.id, HEX);
  Serial.print(" Buffer: ");
  for ( uint8_t i = 0; i < msg.len; i++ ) {
    Serial.print(msg.buf[i], HEX); Serial.print(" ");
  } Serial.println();
}

void setup() {
  Serial.begin(115200); delay(400);
  pinMode(6, OUTPUT); digitalWrite(6, LOW); /* enable transceiver */
  FD.begin(); /* enable the FlexCAN controller before assigning it */

  node100.setBus(_CAN3);
  node100.setID(20);

  CANFD_timings_t config;
  config.clock = CLK_24MHz;
  config.baudrate = 1000000;
  config.baudrateFD = 2000000;
  config.propdelay = 190;
  config.bus_length = 1;
  config.sample = 87.5;
  FD.setRegions(64);
  FD.setBaudRate(config);
  // FD.onReceive(canSniff);
  FD.enableMBInterrupts();
  FD.mailboxStatus();
}

void loop() {
  // FD.events();
  // Node.events();
  static uint32_t t = millis();

  // setup Master to Tail pack and send it to CAN bus
  mtp.updateTime = 11.1f * (loopCount % 5 + 1);
  mtp.drCommand = 22.2f * (loopCount % 5 + 1);
  mtp.deCommand = 1.0f * (loopCount % 5 + 1);
  for (int i = 0; i < 15; i++){
    mtp.err_state[i] = 1.0f * i;
  }
  mtp.gravity[0] = 33.4f;
  mtp.gravity[1] = 66.8f;
  mtp.gravity[2] = 99.4f;
  mtp.mode = 2.0f * (loopCount % 5 + 1);

  uint8_t byteArray[256] = {};
  memcpy(byteArray, &mtp, sizeof(struct MasterToTail));  

  uint8_t data1[256] = {
    154, 153, 49, 65, 154, 153, 177, 65, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 128, 63,
    0, 0, 0, 64, 0, 0, 64, 64, 0, 0, 128, 64, 0, 0, 160, 64, 0, 0, 192, 64,
    0, 0, 224, 64, 0, 0, 0, 65, 0, 0, 16, 65, 0, 0, 32, 65, 0, 0, 48, 65,
    0, 0, 64, 65, 0, 0, 80, 65, 0, 0, 96, 65, 154, 153, 5, 66, 154, 153, 133, 66,
    205, 204, 198, 66, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 40, 64, 85, 85, 85, 85, 85, 213, 84, 64,
    0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0,
    0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 8, 64,
    95, 95, 95, 95, 95, 95, 239, 63, 0, 0, 0, 0, 0, 192, 82, 64, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0,
    0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 64, 95, 64, 0, 0, 0, 0, 0, 0,
    32, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 240, 63, 0, 0,
    0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 240, 63
  };

  uint8_t data2[256] = {
    154, 153, 177, 65, 154, 153, 49, 66, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 128, 63,
    0, 0, 0, 64, 0, 0, 64, 64, 0, 0, 128, 64, 0, 0, 160, 64, 0, 0, 192, 64,
    0, 0, 224, 64, 0, 0, 0, 65, 0, 0, 16, 65, 0, 0, 32, 65, 0, 0, 48, 65,
    0, 0, 64, 65, 0, 0, 80, 65, 0, 0, 96, 65, 154, 153, 5, 66, 154, 153, 133, 66,
    205, 204, 198, 66, 0, 0, 128, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    25, 0, 0, 0, 144, 248, 6, 32, 73, 6, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0,
    0, 20, 0, 32, 208, 15, 0, 32, 0, 20, 0, 32, 40, 128, 29, 64, 1, 0, 0, 0,
    36, 128, 29, 64, 160, 251, 6, 32, 11, 85, 0, 0, 224, 122, 1, 32, 243, 131, 0, 0,
    144, 248, 6, 32, 144, 248, 6, 32, 208, 15, 0, 32, 139, 131, 0, 0, 184, 250, 6, 32,
    0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 9, 9, 77, 66, 49, 51, 32, 99,
    111, 100, 101, 58, 32, 84, 88, 95, 73, 78, 65, 67, 84, 73, 86, 69, 10, 0, 110,
    100, 101, 100, 32, 70, 114, 97, 109, 101, 41, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  };

  uint8_t data3[256] = {
    52, 51, 5, 66, 52, 51, 133, 66, 0, 0, 64, 64, 0, 0, 0, 0, 0, 0, 128, 63,
    0, 0, 0, 64, 0, 0, 64, 64, 0, 0, 128, 64, 0, 0, 160, 64, 0, 0, 192, 64,
    0, 0, 224, 64, 0, 0, 0, 65, 0, 0, 16, 65, 0, 0, 32, 65, 0, 0, 48, 65,
    0, 0, 64, 65, 0, 0, 80, 65, 0, 0, 96, 65, 154, 153, 5, 66, 154, 153, 133, 66,
    205, 204, 198, 66, 0, 0, 192, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    25, 0, 0, 0, 144, 248, 6, 32, 73, 6, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0,
    0, 20, 0, 32, 208, 15, 0, 32, 0, 20, 0, 32, 40, 128, 29, 64, 1, 0, 0, 0,
    36, 128, 29, 64, 160, 251, 6, 32, 11, 85, 0, 0, 224, 122, 1, 32, 243, 131, 0, 0,
    144, 248, 6, 32, 144, 248, 6, 32, 208, 15, 0, 32, 139, 131, 0, 0, 184, 250, 6, 32,
    0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 9, 9, 77, 66, 49, 51, 32, 99,
    111, 100, 101, 58, 32, 84, 88, 95, 73, 78, 65, 67, 84, 73, 86, 69, 10, 0, 110,
    100, 101, 100, 32, 70, 114, 97, 109, 101, 41, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  };

  uint8_t data4[256] = {
    154, 153, 49, 66, 154, 153, 177, 66, 0, 0, 128, 64, 0, 0, 0, 0, 0, 0, 128, 63,
    0, 0, 0, 64, 0, 0, 64, 64, 0, 0, 128, 64, 0, 0, 160, 64, 0, 0, 192, 64,
    0, 0, 224, 64, 0, 0, 0, 65, 0, 0, 16, 65, 0, 0, 32, 65, 0, 0, 48, 65,
    0, 0, 64, 65, 0, 0, 80, 65, 0, 0, 96, 65, 154, 153, 5, 66, 154, 153, 133, 66,
    205, 204, 198, 66, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    25, 0, 0, 0, 144, 248, 6, 32, 73, 6, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0,
    0, 20, 0, 32, 208, 15, 0, 32, 0, 20, 0, 32, 40, 128, 29, 64, 1, 0, 0, 0,
    36, 128, 29, 64, 160, 251, 6, 32, 11, 85, 0, 0, 224, 122, 1, 32, 243, 131, 0, 0,
    144, 248, 6, 32, 144, 248, 6, 32, 208, 15, 0, 32, 139, 131, 0, 0, 184, 250, 6, 32,
    0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 9, 9, 77, 66, 49, 51, 32, 99,
    111, 100, 101, 58, 32, 84, 88, 95, 73, 78, 65, 67, 84, 73, 86, 69, 10, 0, 110,
    100, 101, 100, 32, 70, 114, 97, 109, 101, 41, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  };

  uint8_t data5[256] = {
    0, 0, 94, 66, 0, 0, 222, 66, 0, 0, 160, 64, 0, 0, 0, 0, 0, 0, 128, 63, 
    0, 0, 0, 64, 0, 0, 64, 64, 0, 0, 128, 64, 0, 0, 160, 64, 0, 0, 192, 64, 
    0, 0, 224, 64, 0, 0, 0, 65, 0, 0, 16, 65, 0, 0, 32, 65, 0, 0, 48, 65, 
    0, 0, 64, 65, 0, 0, 80, 65, 0, 0, 96, 65, 154, 153, 5, 66, 154, 153, 133, 66, 
    205, 204, 198, 66, 0, 0, 32, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    25, 0, 0, 0, 144, 248, 6, 32, 73, 6, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 
    0, 0, 20, 0, 32, 208, 15, 0, 32, 0, 20, 0, 32, 40, 128, 29, 64, 1, 0, 
    0, 0, 36, 128, 29, 64, 160, 251, 6, 32, 11, 85, 0, 0, 224, 122, 1, 32, 243, 
    131, 0, 0, 144, 248, 6, 32, 144, 248, 6, 32, 208, 15, 0, 32, 139, 131, 0, 0, 
    184, 250, 6, 32, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 9, 9, 77, 66, 
    49, 51, 32, 99, 111, 100, 101, 58, 32, 84, 88, 95, 73, 78, 65, 67, 84, 73, 86, 
    69, 10, 0, 110, 100, 101, 100, 32, 70, 114, 97, 109, 101, 41, 10, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  };

  if ( millis() - t > 1000 ) {
    Serial.println("Send Start");
    // Serial.println(Node.sendMsg(data5, 256, 3)); /* Global always returns 1, no response. */
    Serial.println(Node.sendMsg(byteArray, 256, 3));
    t = millis();
  }
  loopCount++ ;
}

